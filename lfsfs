#!/bin/bash

# Linux From Scratch - From Scratch

# TODO: get internet access working
# TODO: find a project that builds a minimal kernel config with no modules

# TODO: when we install sudo, mention that the official sudo logo is a fucking sandwich
# https://www.sudo.ws

# your patchelf-frankenstein work may prove useful,
# now that we know the nix founder wrote patchelf!

set -e

mkbins() {
    [ -z "$1" ] && echo "usage: $FUNCNAME <prefix>" && return 1
    local dst="$1"
    pushd "$dst"
    mkdir -pv usr/{bin,lib}
    ln -sv usr/bin bin
    ln -sv usr/bin sbin
    ln -sv usr/lib lib
    ln -sv usr/lib lib64
    pushd usr
    ln -sv lib lib64
    ln -sv bin sbin
    popd
    popd
}

#export prefix="/lfsfs"
export root="$PWD/root"
#mkdir -pv "$root$prefix"
#sudo rm -fv "$prefix"
#sudo ln -sv "$root$prefix" "$prefix"
mkdir -pv "$root"/{boot,etc,dev/{pts,shm},proc,sys}
chmod -v +t "$root"/dev/shm
mkbins "$root"
#mkbins "$prefix"

# Get a C library
if [ ! -d musl ]; then
    git clone https://git.musl-libc.org/git/musl
fi
pushd musl
#./configure --prefix="$prefix" --disable-shared
#make -j
#make install
./configure --prefix="/" --disable-shared
make -j
make DESTDIR="$root" install
popd

# get the kernel headers for musl libc
# https://archlinux.org/packages/extra/x86_64/kernel-headers-musl
if [ ! -d kernel-headers ]; then
    git clone https://github.com/sabotage-linux/kernel-headers
fi
pushd kernel-headers
#make ARCH=x86_64 prefix="$prefix" install
make ARCH=x86_64 prefix="/" DESTDIR="$root" install
popd

# export PATH="$prefix/bin:$PATH"
export PATH="$root/bin:$PATH"

# get some coreutils
if [ ! -d toybox ]; then
    git clone https://github.com/landley/toybox
fi
pushd toybox
#make defconfig
#CC=musl-gcc make
CC=musl-clang LDFLAGS=-static make defconfig
sed -i 's/# CONFIG_SH is not set/CONFIG_SH=y/' .config
CC=musl-clang LDFLAGS=-static make
make install_flat
#rsync -av install/ "$prefix/bin/"
rsync -av install/ "$root/bin/"
popd

# init
cp -v init "$root/sbin"

# etc/profile
cat > "$root"/etc/profile << 'EOF'
# colors
end="\[\e[00m\]"
red="\[\e[1;31m\]"
blu="\[\e[1;34m\]"
whi="\[\e[1;39m\]"

user="${red}r${whi}o${red}o${whi}t${red}"
host="${whi}l${red}f${whi}s${red}f${whi}s"
path="${blu}\w #${end}"
export PS1="${user}@${host} ${path} "
unset user host path

export HOME=/home
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/lfsfs/bin
EOF

# etc/resolv.conf
echo "nameserver 8.8.8.8" > "$root"/etc/resolv.conf

# etc/passwd
cat > $root/etc/passwd << 'EOF'
root:x:0:0:root:/root:/bin/sh
guest:x:500:500:guest:/home/guest:/bin/sh
nobody:x:65534:65534:nobody:/proc/self:/dev/null
EOF

# install pacman-static
cp -v pacman "$root/bin"

# install a hello world program to make sure we can compile it in the chroot
cp -v main.c "$root/"
mkdir $root/usr/include
cp -rv $root/include/* $root/usr/include/   # hack

# remove the bash symlink that comes with toybox sh
# rm -v "$prefix/bin/bash"
rm -v "$root/bin/bash"

# install host bash and everything it links against
./ldds /bin/bash | while read path; do
    install -Dv "$path" "$root$path"
done

# kernel
install -Dv /boot/vmlinuz2 "$root"/boot/vmlinuz2

# tcc
git clone git://repo.or.cz/tinycc
pushd tinycc
./configure --prefix="/usr" --config-musl --extra-ldflags=-static
make -j $(nproc)
make DESTDIR="install" install
rsync -av install/ "$root/"
cp -v /lib/ld-musl-x86_64.so.1 "$root/lib/" # cheating a bit
popd

# install to the mountpoint
partition="$(readlink -f /dev/disk/by-label/Lfsfs)"
mountpoint="/mnt"
sudo mount "$partition" "$mountpoint"
sudo rsync -av --delete "$root"/ "$mountpoint"/
sudo chown -Rv root:root "$mountpoint"/

#sudo mount -t proc /proc "$mountpoint/proc"
#sudo mount --bind /sys "$mountpoint/sys"
#sudo mount --bind /dev "$mountpoint/dev"
sudo chroot "$mountpoint" /bin/bash
